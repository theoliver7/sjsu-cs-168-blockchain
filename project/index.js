var web3 = new Web3();
var from;
var eVotingContract;
var eVotingByteCode;
var eVotingABI = [{
    "inputs": [{"internalType": "string", "name": "_proposal", "type": "string"}],
    "stateMutability": "nonpayable",
    "type": "constructor"
}, {
    "inputs": [{"internalType": "address", "name": "_voterAddress", "type": "address"}, {
        "internalType": "string", "name": "_voterName", "type": "string"
    }], "name": "addVoter", "outputs": [], "stateMutability": "nonpayable", "type": "function"
}, {
    "inputs": [], "name": "beginVote", "outputs": [], "stateMutability": "nonpayable", "type": "function"
}, {
    "inputs": [], "name": "concludeVote", "outputs": [], "stateMutability": "nonpayable", "type": "function"
}, {
    "inputs": [],
    "name": "finalResult",
    "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    "stateMutability": "view",
    "type": "function"
}, {
    "inputs": [],
    "name": "owner",
    "outputs": [{"internalType": "address", "name": "", "type": "address"}],
    "stateMutability": "view",
    "type": "function"
}, {
    "inputs": [],
    "name": "state",
    "outputs": [{"internalType": "enum eVoting.VotingState", "name": "", "type": "uint8"}],
    "stateMutability": "view",
    "type": "function"
}, {
    "inputs": [{"internalType": "bool", "name": "_choice", "type": "bool"}],
    "name": "submitVote",
    "outputs": [{"internalType": "bool", "name": "voted", "type": "bool"}],
    "stateMutability": "nonpayable",
    "type": "function"
}, {
    "inputs": [],
    "name": "totalVote",
    "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    "stateMutability": "view",
    "type": "function"
}, {
    "inputs": [],
    "name": "totalVoter",
    "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    "stateMutability": "view",
    "type": "function"
}, {
    "inputs": [{"internalType": "address", "name": "", "type": "address"}],
    "name": "voterDirectory",
    "outputs": [{"internalType": "string", "name": "voterName", "type": "string"}, {
        "internalType": "bool", "name": "voted", "type": "bool"
    }],
    "stateMutability": "view",
    "type": "function"
}, {
    "inputs": [],
    "name": "votingTopic",
    "outputs": [{"internalType": "string", "name": "", "type": "string"}],
    "stateMutability": "view",
    "type": "function"
}]

var BallotContractAddress = "";
var MyTransactionHash;

window.addEventListener('load', async () => {
    const options = {
        transactionConfirmationBlocks: 1,
        transactionBlockTimeout: 5,
        transactionPollingTimeout: 480
    };
    window.web3 = new Web3(window.ethereum,null,options);
    try {
        let address = await window.ethereum.request({method: 'eth_requestAccounts'});
        from = address[0]
        eVotingContract = new web3.eth.Contract(eVotingABI);
        eVotingByteCode = '6080604052600080556000600155600060025560006003553480156200002457600080fd5b50604051620013943803806200139483398181016040528101906200004a919062000326565b33600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060059080519060200190620000a3929190620000d9565b506000600860006101000a81548160ff02191690836002811115620000cd57620000cc62000377565b5b0217905550506200040a565b828054620000e790620003d5565b90600052602060002090601f0160209004810192826200010b576000855562000157565b82601f106200012657805160ff191683800117855562000157565b8280016001018555821562000157579182015b828111156200015657825182559160200191906001019062000139565b5b5090506200016691906200016a565b5090565b5b80821115620001855760008160009055506001016200016b565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001f282620001a7565b810181811067ffffffffffffffff82111715620002145762000213620001b8565b5b80604052505050565b60006200022962000189565b9050620002378282620001e7565b919050565b600067ffffffffffffffff8211156200025a5762000259620001b8565b5b6200026582620001a7565b9050602081019050919050565b60005b838110156200029257808201518184015260208101905062000275565b83811115620002a2576000848401525b50505050565b6000620002bf620002b9846200023c565b6200021d565b905082815260208101848484011115620002de57620002dd620001a2565b5b620002eb84828562000272565b509392505050565b600082601f8301126200030b576200030a6200019d565b5b81516200031d848260208601620002a8565b91505092915050565b6000602082840312156200033f576200033e62000193565b5b600082015167ffffffffffffffff81111562000360576200035f62000198565b5b6200036e84828501620002f3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003ee57607f821691505b602082108103620004045762000403620003a6565b5b50919050565b610f7a806200041a6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063c19d93fb11610071578063c19d93fb1461011c578063c9f98d521461013a578063d9e95a981461016b578063e8363e9914610187578063f1cea4c7146101b7578063f3a8286f146101d5576100a9565b806328bc5ee4146100ae5780636332abc9146100b85780636e978fde146100d65780638da5cb5b146100e057806398d55578146100fe575b600080fd5b6100b66101f3565b005b6100c06102bc565b6040516100cd91906109ec565b60405180910390f35b6100de6102c2565b005b6100e8610394565b6040516100f59190610a48565b60405180910390f35b6101066103ba565b6040516101139190610afc565b60405180910390f35b610124610448565b6040516101319190610b95565b60405180910390f35b610154600480360381019061014f9190610bf0565b61045b565b604051610162929190610c38565b60405180910390f35b61018560048036038101906101809190610d9d565b610514565b005b6101a1600480360381019061019c9190610e25565b61066f565b6040516101ae9190610e52565b60405180910390f35b6101bf6108d6565b6040516101cc91906109ec565b60405180910390f35b6101dd6108dc565b6040516101ea91906109ec565b60405180910390f35b600080600281111561020857610207610b1e565b5b600860009054906101000a900460ff16600281111561022a57610229610b1e565b5b1461023457600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461028e57600080fd5b6001600860006101000a81548160ff021916908360028111156102b4576102b3610b1e565b5b021790555050565b60025481565b60018060028111156102d7576102d6610b1e565b5b600860009054906101000a900460ff1660028111156102f9576102f8610b1e565b5b1461030357600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035d57600080fd5b6002600860006101000a81548160ff0219169083600281111561038357610382610b1e565b5b021790555060005460018190555050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600580546103c790610e9c565b80601f01602080910402602001604051908101604052809291908181526020018280546103f390610e9c565b80156104405780601f1061041557610100808354040283529160200191610440565b820191906000526020600020905b81548152906001019060200180831161042357829003601f168201915b505050505081565b600860009054906101000a900460ff1681565b600760205280600052604060002060009150905080600001805461047e90610e9c565b80601f01602080910402602001604051908101604052809291908181526020018280546104aa90610e9c565b80156104f75780601f106104cc576101008083540402835291602001916104f7565b820191906000526020600020905b8154815290600101906020018083116104da57829003601f168201915b5050505050908060010160009054906101000a900460ff16905082565b600080600281111561052957610528610b1e565b5b600860009054906101000a900460ff16600281111561054b5761054a610b1e565b5b1461055557600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105af57600080fd5b6105b76108e2565b828160000181905250600081602001901515908115158152505080600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908051906020019061062d9291906108fe565b5060208201518160010160006101000a81548160ff0219169083151502179055509050506002600081548092919061066490610efc565b919050555050505050565b6000600180600281111561068657610685610b1e565b5b600860009054906101000a900460ff1660028111156106a8576106a7610b1e565b5b146106b257600080fd5b600080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805461070290610e9c565b90501415801561075f5750600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff16155b156108cb576001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160006101000a81548160ff0219169083151502179055506107c7610984565b33816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505084816020019015159081151581525050841561082d5760008081548092919061082790610efc565b91905055505b8060066000600354815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908315150217905550905050600360008154809291906108c090610efc565b919050555060019150505b600192505050919050565b60035481565b60015481565b6040518060400160405280606081526020016000151581525090565b82805461090a90610e9c565b90600052602060002090601f01602090048101928261092c5760008555610973565b82601f1061094557805160ff1916838001178555610973565b82800160010185558215610973579182015b82811115610972578251825591602001919060010190610957565b5b50905061098091906109b6565b5090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b5b808211156109cf5760008160009055506001016109b7565b5090565b6000819050919050565b6109e6816109d3565b82525050565b6000602082019050610a0160008301846109dd565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a3282610a07565b9050919050565b610a4281610a27565b82525050565b6000602082019050610a5d6000830184610a39565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a9d578082015181840152602081019050610a82565b83811115610aac576000848401525b50505050565b6000601f19601f8301169050919050565b6000610ace82610a63565b610ad88185610a6e565b9350610ae8818560208601610a7f565b610af181610ab2565b840191505092915050565b60006020820190508181036000830152610b168184610ac3565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610b5e57610b5d610b1e565b5b50565b6000819050610b6f82610b4d565b919050565b6000610b7f82610b61565b9050919050565b610b8f81610b74565b82525050565b6000602082019050610baa6000830184610b86565b92915050565b6000604051905090565b600080fd5b600080fd5b610bcd81610a27565b8114610bd857600080fd5b50565b600081359050610bea81610bc4565b92915050565b600060208284031215610c0657610c05610bba565b5b6000610c1484828501610bdb565b91505092915050565b60008115159050919050565b610c3281610c1d565b82525050565b60006040820190508181036000830152610c528185610ac3565b9050610c616020830184610c29565b9392505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610caa82610ab2565b810181811067ffffffffffffffff82111715610cc957610cc8610c72565b5b80604052505050565b6000610cdc610bb0565b9050610ce88282610ca1565b919050565b600067ffffffffffffffff821115610d0857610d07610c72565b5b610d1182610ab2565b9050602081019050919050565b82818337600083830152505050565b6000610d40610d3b84610ced565b610cd2565b905082815260208101848484011115610d5c57610d5b610c6d565b5b610d67848285610d1e565b509392505050565b600082601f830112610d8457610d83610c68565b5b8135610d94848260208601610d2d565b91505092915050565b60008060408385031215610db457610db3610bba565b5b6000610dc285828601610bdb565b925050602083013567ffffffffffffffff811115610de357610de2610bbf565b5b610def85828601610d6f565b9150509250929050565b610e0281610c1d565b8114610e0d57600080fd5b50565b600081359050610e1f81610df9565b92915050565b600060208284031215610e3b57610e3a610bba565b5b6000610e4984828501610e10565b91505092915050565b6000602082019050610e676000830184610c29565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610eb457607f821691505b602082108103610ec757610ec6610e6d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f07826109d3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610f3957610f38610ecd565b5b60018201905091905056fea2646970667358221220517406908ff06a2343c7361ec2b50d71bd6172cce7b7a52da2d7dd4a3f1d850764736f6c634300080d0033';
    } catch (error) {
        if (error.code === 4001) {
            // User rejected request
        }
        console.log(error)
    }
    // loadBallotContract()
});

function deployVote() {

    eVotingContract = new this.web3.eth.Contract(eVotingABI);

    eVotingContract.deploy({
        data: eVotingByteCode, arguments: [document.getElementById('proposal').value]
    }).send({
        from: from, gas: 1500000, gasPrice: this.web3.utils.toWei("0.00003", 'ether')
    }, function (error, transactionHash) {
        console.log("f")
    })
        .on('error', function (error) {
            console.log("d")
        })
        .on('transactionHash', function (transactionHash) {
            console.log("")
        })
        .on('receipt', function (receipt) {
            console.log(receipt.contractAddress) // contains the new contract address
        })
        .on('confirmation', function (confirmationNumber, receipt) {
            console.log("x")
        })
        .then(function (newContractInstance) {
            console.log(newContractInstance.options.address) // instance with the new contract address
        })

    console.log("lets deploy this shit")


}

function addInitialVoters() {
    eVoteContract = new web3.eth.Contract(eVotingABI, "0x4ce5b75f2dda0c721a288c0ee98186eb99745a75");
    let addresses = document.getElementById('addresses').value.split(";")
    console.log(addresses)
    addresses.forEach(address => {
        console.log(from)
        this.eVoteContract.methods.addVoter(address, "Test").send({
            from: from,
        }).then((result) => {
            console.log(result)
        });
    })
}

async function loadVoteContract() {
    Ballot = new web3.eth.Contract(eVotingABI, eVotingContract.address);
    Ballot.methods.votingTopic().call().then((result) => {
        console.log(result)
    });
}

